plugins {
    id("com.gradleup.shadow") version "8.3.7"
    id("io.micronaut.application") version "4.5.4"
    id("io.micronaut.aot") version "4.5.4"
}

group = "io.github.rjaros87"
description = "JWTTestKit is a lightweight tool for testing JWT-based authentication. It generates tokens and " +
    "hosts a mock JWKS endpoint, simplifying the simulation of authentication flows without real-world services."

Map<String, String> dockerLabels = Map.of(
    "org.opencontainers.image.title", project.name,
    "org.opencontainers.image.version", project.version as String,
    "org.opencontainers.image.description", project.description,
    "org.opencontainers.image.licenses", "Apache-2.0",
    "org.opencontainers.image.source", "https://github.com/rjaros87/JWTTestKit",
    "org.opencontainers.image.created", new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX"),
    "org.opencontainers.image.authors", "Radoslaw Jaros"
)

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("org.projectlombok:lombok")

    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.openapi:micronaut-openapi")
    implementation(platform("org.apache.logging.log4j:log4j-bom:2.25.1"))
    implementation("org.apache.logging.log4j:log4j-api")

    implementation("io.swagger.core.v3:swagger-annotations:2.2.34")
    implementation("com.nimbusds:nimbus-jose-jwt:10.3")

    compileOnly("io.micronaut:micronaut-http-client")
    compileOnly("io.micronaut.openapi:micronaut-openapi-annotations")
    compileOnly("org.projectlombok:lombok")

    runtimeOnly("org.yaml:snakeyaml")
    runtimeOnly("org.apache.logging.log4j:log4j-core")
    runtimeOnly("org.apache.logging.log4j:log4j-layout-template-json")

    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("org.mockito:mockito-core:5.18.0")
    testImplementation("org.apache.logging.log4j:log4j-core:2.25.1")

    aotPlugins(platform("io.micronaut.platform:micronaut-platform"))
    aotPlugins("io.micronaut.security:micronaut-security-aot")
}


application {
    mainClass = "io.github.rjaros87.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}


tasks {
    dockerBuild {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version".toLowerCase()]
        labels = dockerLabels
    }

    optimizedDockerBuildNative {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:${project.version}-optimized-native".toLowerCase()]
        labels = dockerLabels
    }
}



//docker buildx create --name multiarch --driver docker-container --use
def registerDockerBuildTask(String taskName, List<String> dependencies, String tagSuffix,
                            String buildContext, String dockerfileName, Map<String, String> dockerLabels) {

    String registry = "${System.env.DOCKER_IMAGE ?: project.name}"
    def dockerLabelsArg = dockerLabels.collect { key, value -> "--label=${key}=${value}" }
    def annotation = "index:org.opencontainers.image.description=${project.description}"

    tasks.register(taskName, Exec) {
        dependencies.each { dependsOn it }
        group 'docker'
        workingDir 'build/docker'
        executable 'docker'
        args = ['buildx', 'build', '--platform', 'linux/amd64,linux/arm64',
                '--provenance', 'false', '--sbom', 'false'] +
                dockerLabelsArg +
                ["--annotation=${annotation}",
                '-t', "${registry}:${project.version}${tagSuffix}".toLowerCase(),
                '-f', "${buildContext}/${dockerfileName}", buildContext, '--push']
    }
}

registerDockerBuildTask('dockerBuildPushX', ['dockerfile', 'buildLayers'], '', 'main', 'Dockerfile', dockerLabels)
registerDockerBuildTask('optimizedDockerBuildNativePushX', ['optimizedDockerfileNative',
                                                            'optimizedDockerPrepareContext',
                                                            'optimizedBuildNativeLayersTask'],
        '-optimized-native', 'native-optimized', 'DockerfileNative', dockerLabels)


tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << "-Dmicronaut.openapi.expand.api.version=${project.version}".toString()
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.github.rjaros87.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = false
    }
}

tasks.named("dockerfileNative") {
    jdkVersion = "21"
}
